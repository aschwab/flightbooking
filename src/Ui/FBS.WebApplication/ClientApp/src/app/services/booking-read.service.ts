/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.2.0 (NJsonSchema v10.1.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BOOKING_READ_API_BASE_URL = new InjectionToken<string>('BOOKING_READ_API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class BookingReadService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BOOKING_READ_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param flightId (optional) 
     * @param customerId (optional) 
     * @return Success
     */
    getBookingsByFlightQuery(flightId: string | undefined, customerId: string | undefined): Observable<BookingAggregate[]> {
        let url_ = this.baseUrl + "/Booking/GetBookingsByFlightQuery?";
        if (flightId === null)
            throw new Error("The parameter 'flightId' cannot be null.");
        else if (flightId !== undefined)
            url_ += "FlightId=" + encodeURIComponent("" + flightId) + "&"; 
        if (customerId === null)
            throw new Error("The parameter 'customerId' cannot be null.");
        else if (customerId !== undefined)
            url_ += "CustomerId=" + encodeURIComponent("" + customerId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBookingsByFlightQuery(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookingsByFlightQuery(<any>response_);
                } catch (e) {
                    return <Observable<BookingAggregate[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<BookingAggregate[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetBookingsByFlightQuery(response: HttpResponseBase): Observable<BookingAggregate[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BookingAggregate.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BookingAggregate[]>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getFlightByIdQuery(id: string | undefined): Observable<FlightAggregate> {
        let url_ = this.baseUrl + "/Booking/GetFlightByIdQuery?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFlightByIdQuery(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFlightByIdQuery(<any>response_);
                } catch (e) {
                    return <Observable<FlightAggregate>><any>_observableThrow(e);
                }
            } else
                return <Observable<FlightAggregate>><any>_observableThrow(response_);
        }));
    }

    protected processGetFlightByIdQuery(response: HttpResponseBase): Observable<FlightAggregate> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FlightAggregate.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FlightAggregate>(<any>null);
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    getAllFlightsQuery(request: GetAllFlightsQuery | undefined): Observable<FlightAggregate[]> {
        let url_ = this.baseUrl + "/Booking/GetAllFlightsQuery?";
        if (request === null)
            throw new Error("The parameter 'request' cannot be null.");
        else if (request !== undefined)
            url_ += "request=" + encodeURIComponent("" + request) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllFlightsQuery(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllFlightsQuery(<any>response_);
                } catch (e) {
                    return <Observable<FlightAggregate[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<FlightAggregate[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllFlightsQuery(response: HttpResponseBase): Observable<FlightAggregate[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FlightAggregate.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FlightAggregate[]>(<any>null);
    }
}

export enum BookingState {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class BookingAggregate implements IBookingAggregate {
    flightId?: string;
    customerId?: string;
    bookingNumber?: string | undefined;
    seatNumber?: string | undefined;
    state?: BookingState;
    readonly id?: string;

    constructor(data?: IBookingAggregate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.flightId = _data["flightId"];
            this.customerId = _data["customerId"];
            this.bookingNumber = _data["bookingNumber"];
            this.seatNumber = _data["seatNumber"];
            this.state = _data["state"];
            (<any>this).id = _data["id"];
        }
    }

    static fromJS(data: any): BookingAggregate {
        data = typeof data === 'object' ? data : {};
        let result = new BookingAggregate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["flightId"] = this.flightId;
        data["customerId"] = this.customerId;
        data["bookingNumber"] = this.bookingNumber;
        data["seatNumber"] = this.seatNumber;
        data["state"] = this.state;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBookingAggregate {
    flightId?: string;
    customerId?: string;
    bookingNumber?: string | undefined;
    seatNumber?: string | undefined;
    state?: BookingState;
    id?: string;
}

export class Seat implements ISeat {
    number?: string | undefined;
    row?: number;
    column?: string | undefined;
    isOccupied?: boolean;

    constructor(data?: ISeat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.row = _data["row"];
            this.column = _data["column"];
            this.isOccupied = _data["isOccupied"];
        }
    }

    static fromJS(data: any): Seat {
        data = typeof data === 'object' ? data : {};
        let result = new Seat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["row"] = this.row;
        data["column"] = this.column;
        data["isOccupied"] = this.isOccupied;
        return data; 
    }
}

export interface ISeat {
    number?: string | undefined;
    row?: number;
    column?: string | undefined;
    isOccupied?: boolean;
}

export class Location implements ILocation {
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: ILocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Location {
        data = typeof data === 'object' ? data : {};
        let result = new Location();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface ILocation {
    code?: string | undefined;
    name?: string | undefined;
}

export class TimeSpan implements ITimeSpan {
    readonly ticks?: number;
    readonly days?: number;
    readonly hours?: number;
    readonly milliseconds?: number;
    readonly minutes?: number;
    readonly seconds?: number;
    readonly totalDays?: number;
    readonly totalHours?: number;
    readonly totalMilliseconds?: number;
    readonly totalMinutes?: number;
    readonly totalSeconds?: number;

    constructor(data?: ITimeSpan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).ticks = _data["ticks"];
            (<any>this).days = _data["days"];
            (<any>this).hours = _data["hours"];
            (<any>this).milliseconds = _data["milliseconds"];
            (<any>this).minutes = _data["minutes"];
            (<any>this).seconds = _data["seconds"];
            (<any>this).totalDays = _data["totalDays"];
            (<any>this).totalHours = _data["totalHours"];
            (<any>this).totalMilliseconds = _data["totalMilliseconds"];
            (<any>this).totalMinutes = _data["totalMinutes"];
            (<any>this).totalSeconds = _data["totalSeconds"];
        }
    }

    static fromJS(data: any): TimeSpan {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSpan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticks"] = this.ticks;
        data["days"] = this.days;
        data["hours"] = this.hours;
        data["milliseconds"] = this.milliseconds;
        data["minutes"] = this.minutes;
        data["seconds"] = this.seconds;
        data["totalDays"] = this.totalDays;
        data["totalHours"] = this.totalHours;
        data["totalMilliseconds"] = this.totalMilliseconds;
        data["totalMinutes"] = this.totalMinutes;
        data["totalSeconds"] = this.totalSeconds;
        return data; 
    }
}

export interface ITimeSpan {
    ticks?: number;
    days?: number;
    hours?: number;
    milliseconds?: number;
    minutes?: number;
    seconds?: number;
    totalDays?: number;
    totalHours?: number;
    totalMilliseconds?: number;
    totalMinutes?: number;
    totalSeconds?: number;
}

export class FlightAggregate implements IFlightAggregate {
    seats?: Seat[] | undefined;
    from?: Location | undefined;
    to?: Location | undefined;
    date?: Date;
    duration?: TimeSpan;
    readonly arrival?: Date;
    number?: string | undefined;
    gate?: string | undefined;
    planeModel?: string | undefined;
    readonly id?: string;

    constructor(data?: IFlightAggregate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["seats"])) {
                this.seats = [] as any;
                for (let item of _data["seats"])
                    this.seats!.push(Seat.fromJS(item));
            }
            this.from = _data["from"] ? Location.fromJS(_data["from"]) : <any>undefined;
            this.to = _data["to"] ? Location.fromJS(_data["to"]) : <any>undefined;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.duration = _data["duration"] ? TimeSpan.fromJS(_data["duration"]) : <any>undefined;
            (<any>this).arrival = _data["arrival"] ? new Date(_data["arrival"].toString()) : <any>undefined;
            this.number = _data["number"];
            this.gate = _data["gate"];
            this.planeModel = _data["planeModel"];
            (<any>this).id = _data["id"];
        }
    }

    static fromJS(data: any): FlightAggregate {
        data = typeof data === 'object' ? data : {};
        let result = new FlightAggregate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.seats)) {
            data["seats"] = [];
            for (let item of this.seats)
                data["seats"].push(item.toJSON());
        }
        data["from"] = this.from ? this.from.toJSON() : <any>undefined;
        data["to"] = this.to ? this.to.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["duration"] = this.duration ? this.duration.toJSON() : <any>undefined;
        data["arrival"] = this.arrival ? this.arrival.toISOString() : <any>undefined;
        data["number"] = this.number;
        data["gate"] = this.gate;
        data["planeModel"] = this.planeModel;
        data["id"] = this.id;
        return data; 
    }
}

export interface IFlightAggregate {
    seats?: Seat[] | undefined;
    from?: Location | undefined;
    to?: Location | undefined;
    date?: Date;
    duration?: TimeSpan;
    arrival?: Date;
    number?: string | undefined;
    gate?: string | undefined;
    planeModel?: string | undefined;
    id?: string;
}

export class GetAllFlightsQuery implements IGetAllFlightsQuery {

    constructor(data?: IGetAllFlightsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetAllFlightsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllFlightsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetAllFlightsQuery {
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}